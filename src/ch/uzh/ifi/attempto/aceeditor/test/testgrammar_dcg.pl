% This code is automatically generated on the basis of a file in Codeco notation.
%
% For more information, see the package ch.uzh.ifi.attempto.codeco of the AceWiki system
% (http://attempto.ifi.uzh.ch/acewiki/) and the thesis "Controlled English for Knowledge
% Representation" (http://attempto.ifi.uzh.ch/site/pubs/papers/doctoral_thesis_kuhn.pdf).


/* === ACE Editor Grammar === */
/* - Tobias Kuhn, 17 September 2010 - */

/* --- Texts and Sentences --- */
complete_sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(complete_sentence, (Z, ['.'])), A1/B1)-->sentence([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Z, A1/B1), ['.'].
complete_sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(complete_sentence, (//, Z, [?])), A1/B1)-->[C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2]// (A1/B2), simple_sentence_2([minus, plus, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2], Z, B2/Z2), [?], ~(A1/Z2/B1).
sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(sentence, Z), A1/B1)-->sentence_coord_1([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Z, A1/B1).
sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(sentence, (//, ['for every'], Z, A1)), B1/C1)-->[D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2]// (B1/C2), ['for every'], nc([D2, E2, minus, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3], Z, C2/B3), sentence_coord_1([C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3, Y3, Z3, A4], A1, B3/B4), ~(B1/B4/C1).
sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(sentence, (//, [if], Z, [then], A1)), B1/C1)-->[D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2]// (B1/C2), [if], sentence_coord_1([D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3], Z, C2/C3), [then], sentence_coord_1([D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3, Y3, Z3, A4, B4], A1, C3/C4), ~(B1/C4/C1).
sentence_coord_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(sentence_coord_1, Z), A1/B1)-->sentence_coord_2([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Z, A1/B1).
sentence_coord_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(sentence_coord_2, Z), A1/B1)-->simple_sentence_1([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Z, A1/B1).
sentence_coord_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(sentence_coord_2, (Z, [and], A1)), B1/C1)-->simple_sentence_1([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/C2), [and], sentence_coord_2([D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3], A1, C2/C1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(simple_sentence_1, (//, ['it is false that'], Z)), A1/B1)-->[C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2]// (A1/B2), ['it is false that'], simple_sentence_2([minus, minus, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2], Z, B2/Z2), ~(A1/Z2/B1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(simple_sentence_1, (['there is'], Z)), A1/B1)-->['there is'], np([minus, minus, minus, plus, minus, minus, nom, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1], Z, A1/B1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(simple_sentence_1, (['there is'], Z, ['such that'], A1)), B1/C1)-->['there is'], np([minus, minus, minus, plus, minus, minus, nom, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1], Z, B1/V1), ['such that'], simple_sentence_1([W1, X1, Y1, Z1, A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2], A1, V1/C1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(simple_sentence_1, (['there are'], Z)), A1/B1)-->['there are'], np([minus, minus, minus, plus, minus, plus, nom, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1], Z, A1/B1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(simple_sentence_1, Z), A1/B1)-->simple_sentence_2([minus, minus, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], Z, A1/B1).
simple_sentence_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(simple_sentence_2(whin:A, whout:B), (Z, A1)), B1/C1)-->np([A, D1, minus, E1, F1, G1, nom, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], Z, B1/Z1), vp_coord_1([D1, B, H1, A2, B2, G1, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2], A1, Z1/V2), ~(B1/V2/C1).

/* --- Verb Phrases --- */
vp_coord_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vp_coord_1(subj:C, pl:F, whin:A, whout:B), Z), A1/B1)-->vp_coord_2([A, B, C, C1, D1, F, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1], Z, A1/B1).
vp_coord_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vp_coord_2(subj:C, pl:F, whin:A, whout:B), Z), A1/B1)-->vp([A, B, C, C1, D1, F, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1], Z, A1/B1).
vp_coord_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vp_coord_2(subj:C, pl:F, whin:A, whout:B), (Z, [and], A1)), B1/C1)-->vp([A, D1, C, E1, F1, F, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], Z, B1/Z1), [and], vp_coord_2([D1, B, C, A2, B2, F, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2], A1, Z1/C1).
vp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vp(subj:C, exist:D, rel:I, pl:F, whin:A, whout:B), (Z, A1, B1)), C1/D1)-->aux([E1, F1, G1, D, H1, F, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Z, C1/B2), v([A, C2, C, D, D2, F, E2, F2, I, L1, inf, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2], A1, B2/U2), vmod([C2, B, C, V2, W2, X2, Y2, Z2, A3, B3, C3, G2, H2, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3], B1, U2/P3), ~(C1/P3/D1).
vp([A, B, C, plus, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(vp(subj:C, exist:plus, rel:H, pl:E, whin:A, whout:B), (Y, Z)), A1/B1)-->v([A, C1, C, plus, D1, E, E1, F1, H, minus, fin, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1], Y, A1/U1), vmod([C1, B, C, V1, W1, X1, Y1, Z1, A2, B2, C2, G1, H1, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2], Z, U1/P2), ~(A1/P2/B1).
v([A, A, B, C, D, E, F, G, H, minus, I, J, minus, K, L, M, N, O, P, Q, R, S, T, U, V], =>(v(be:minus, pl:E, vform:I, copula:minus, whin:A, whout:A), W), X/Y)-->verb([Z, A1, B1, C1, D1, E, E1, F1, G1, minus, I, H1, I1, itr, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1], W, X/Y).
v([A, B, C, D, E, F, G, H, I, minus, J, K, minus, L, M, N, O, P, Q, R, S, T, U, V, W], =>(v(subj:C, be:minus, rel:I, pl:F, vform:J, embv:K, copula:minus, whin:A, whout:B), (X, Y)), Z/A1)-->verb([B1, C1, D1, E1, F1, F, G1, H1, I1, minus, J, J1, K1, tr, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1], X, Z/W1), np([A, B, C, X1, Y1, Z1, acc, A2, I, B2, C2, K, D2, tr, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2], Y, W1/A1).
v([A, B, C, D, E, F, G, H, I, plus, J, K, minus, L, M, N, O, P, Q, R, S, T, U, V, W], =>(v(subj:C, be:plus, rel:I, embv:K, copula:minus, whin:A, whout:B), (X, [by], Y)), Z/A1)-->verb([B1, C1, D1, E1, F1, G1, H1, I1, J1, plus, K1, L1, M1, tr, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], X, Z/Y1), [by], np([A, B, C, Z1, A2, B2, acc, C2, I, D2, E2, K, minus, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2], Y, Y1/A1).
v([A, B, C, D, E, F, G, H, I, plus, J, K, plus, L, M, N, O, P, Q, R, S, T, U, V, W], =>(v(subj:C, be:plus, rel:I, embv:K, copula:plus, whin:A, whout:B), X), Y/Z)-->np([A, B, C, A1, B1, minus, acc, C1, I, D1, E1, K, plus, F1, plus, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1], X, Y/Z).
v([A, B, C, D, E, minus, F, G, H, plus, I, J, plus, K, L, M, N, O, P, Q, R, S, T, U, V], =>(v(subj:C, be:plus, rel:H, pl:minus, embv:J, copula:plus, whin:A, whout:B), W), X/Y)-->np([A, B, C, Z, A1, minus, acc, B1, H, C1, D1, J, plus, E1, minus, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1], W, X/Y).
v([A, A, B, C, D, E, F, G, H, plus, I, J, plus, K, L, M, N, O, P, Q, R, S, T, U, V], =>(v(be:plus, copula:plus, whin:A, whout:A), W), X/Y)-->adj_coord([Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], W, X/Y).
v([A, B, C, D, E, F, G, H, I, plus, J, K, plus, L, M, N, O, P, Q, R, S, T, U, V, W], =>(v(subj:C, be:plus, rel:I, embv:K, copula:plus, whin:A, whout:B), X), Y/Z)-->adjc([A, B, C, A1, B1, C1, D1, E1, I, F1, G1, K, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1], X, Y/Z).

/* --- Noun Phrases --- */
np([A, B, C, plus, plus, minus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, rel:F, of:minus, def:plus, pl:minus, embv:I, whin:A, whout:B), (V, >>(id:E, human:W, gender:X, type:prop, hasvar:minus), Y)), Z/A1)-->prop([B1, C1, D1, E1, F1, G1, H1, E, I1, J1, K1, L1, M1, N1, O1, W, X, P1, Q1, R1, S1, T1, U1, V1, W1], V, Z/X1), [Y1, Z1, A2, B2, C2, D2, E2, E, F2, G2, H2, I2, J2, K2, L2, W, X, prop, minus, M2, N2, O2, P2, Q2, R2]>> (X1/S2), relcl([A, B, E, T2, U2, V2, W2, X2, F, Y2, Z2, I, A3, B3, C3, W, D3, E3, F3, G3, H3, I3, J3, K3, L3], Y, S2/A1).
np([A, A, B, plus, plus, minus, C, D, E, F, G, H, I, J, minus, K, L, M, N, O, P, Q, R, S, T], =>(np(id:D, exist:plus, of:minus, def:plus, pl:minus, whin:A, whout:A), (#(D), U, >(id:D, type:var, hasvar:plus, var:V))), W/X)--> #(D), newvar([Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, V, R1, S1, T1, U1, V1], U, W/W1), [X1, Y1, Z1, A2, B2, C2, D2, D, E2, F2, G2, H2, I2, J2, K2, L2, M2, var, plus, V, N2, O2, P2, Q2, R2]>W1/X.
np([A, A, B, plus, plus, minus, C, D, E, F, G, H, I, J, minus, K, L, M, N, O, P, Q, R, S, T], =>(np(id:D, exist:plus, of:minus, def:plus, pl:minus, whin:A, whout:A), (U, V, <(id:D, type:noun, hasvar:plus, noun:W, var:X, human:Y, gender:Z), >(id:D, human:Y, gender:Z, type:ref, hasvar:minus))), A1/B1)--> $def_noun_sg([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W, W1, X1, Y1, Z1], U, A1/A1), $ref([A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, X, V2, W2, X2], V, A1/A1), [+[Y2, Z2, A3, B3, C3, D3, E3, D, F3, G3, H3, I3, J3, K3, L3, Y, Z, noun, plus, X, W, M3, N3, O3, P3]]<A1/Q3, [R3, S3, T3, U3, V3, W3, X3, D, Y3, Z3, A4, B4, C4, D4, E4, Y, Z, ref, minus, F4, G4, H4, I4, J4, K4]>Q3/B1.
np([A, A, B, plus, plus, minus, C, D, E, F, G, H, I, J, minus, K, L, M, N, O, P, Q, R, S, T], =>(np(id:D, exist:plus, of:minus, def:plus, pl:minus, whin:A, whout:A), (U, <(id:D, type:noun, noun:V, human:W, gender:X), >(id:D, human:W, gender:X, type:ref, hasvar:minus))), Y/Z)--> $def_noun_sg([A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, V, U1, V1, W1, X1], U, Y/Y), [+[Y1, Z1, A2, B2, C2, D2, E2, D, F2, G2, H2, I2, J2, K2, L2, W, X, noun, M2, N2, V, O2, P2, Q2, R2]]<Y/S2, [T2, U2, V2, W2, X2, Y2, Z2, D, A3, B3, C3, D3, E3, F3, G3, W, X, ref, minus, H3, I3, J3, K3, L3, M3]>S2/Z.
np([A, A, B, plus, plus, minus, C, D, E, F, G, H, I, J, minus, K, L, M, N, O, P, Q, R, S, T], =>(np(id:D, exist:plus, of:minus, def:plus, pl:minus, whin:A, whout:A), (U, <(id:D, hasvar:plus, var:V, human:W, gender:X), >(id:D, human:W, gender:X, type:ref, hasvar:minus))), Y/Z)--> $ref([A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V, V1, W1, X1], U, Y/Y), [+[Y1, Z1, A2, B2, C2, D2, E2, D, F2, G2, H2, I2, J2, K2, L2, W, X, M2, plus, V, N2, O2, P2, Q2, R2]]<Y/S2, [T2, U2, V2, W2, X2, Y2, Z2, D, A3, B3, C3, D3, E3, F3, G3, W, X, ref, minus, H3, I3, J3, K3, L3, M3]>S2/Z.
np([A, A, B, plus, plus, minus, C, B, D, E, F, G, H, I, minus, J, K, L, M, N, O, P, plus, Q, R], =>(np(id:B, subj:B, exist:plus, of:minus, def:plus, pl:minus, refl:plus, whin:A, whout:A), (S, <(id:B, human:T, gender:U))), V/W)--> $pron([X, Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, T, U, M1, N1, O1, P1, Q1, plus, R1, S1], S, V/V), [+[T1, U1, V1, W1, X1, Y1, Z1, B, A2, B2, C2, D2, E2, F2, G2, T, U, H2, I2, J2, K2, L2, M2, N2, O2]]<V/W.
np([A, A, B, plus, plus, minus, C, D, E, F, G, H, I, J, minus, K, L, M, N, O, P, Q, minus, R, S], =>(np(id:D, subj:B, exist:plus, of:minus, def:plus, pl:minus, refl:minus, case:C, whin:A, whout:A), (T, +(id:D, human:U, gender:V)< - (id:B), >(id:D, human:U, gender:V, type:pron, hasvar:minus))), W/X)--> $pron([Y, Z, A1, B1, C1, D1, C, E1, F1, G1, H1, I1, J1, K1, L1, U, V, M1, N1, O1, P1, Q1, minus, R1, S1], T, W/W), [+[T1, U1, V1, W1, X1, Y1, Z1, D, A2, B2, C2, D2, E2, F2, G2, U, V, H2, I2, J2, K2, L2, M2, N2, O2], -[P2, Q2, R2, S2, T2, U2, V2, B, W2, X2, Y2, Z2, A3, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3]]<W/N3, [O3, P3, Q3, R3, S3, T3, U3, D, V3, W3, X3, Y3, Z3, A4, B4, U, V, pron, minus, C4, D4, E4, F4, G4, H4]>N3/X.
np([A, B, C, D, E, minus, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(np(id:G, subj:C, exist:D, rel:H, of:N, pl:minus, embv:K, whin:A, whout:B), (Y, Z)), A1/B1)-->quant([C1, D1, E1, D, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], Y, A1/A2), nc([A, B, C, B2, C2, D2, E2, G, H, F2, G2, K, H2, I2, N, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2], Z, A2/B1).
np([A, B, C, D, E, minus, F, G, H, I, J, K, L, M, minus, N, O, P, Q, R, S, T, U, V, W], =>(np(id:G, exist:D, rel:H, of:minus, pl:minus, embv:K, whin:A, whout:B), (#(G), X, Y, >(id:G, human:Z, type:ipron, hasvar:A1, var:B1), C1)), D1/E1)--> #(G), ipron([F1, G1, H1, D, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, Z, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], X, D1/C2), opt_newvar([D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, A1, B1, V2, W2, X2, Y2, Z2], Y, C2/A3), [B3, C3, D3, E3, F3, G3, H3, G, I3, J3, K3, L3, M3, N3, O3, Z, P3, ipron, A1, B1, Q3, R3, S3, T3, U3]>A3/V3, relcl([A, B, G, W3, X3, Y3, Z3, A4, H, B4, C4, K, D4, E4, F4, Z, G4, H4, I4, J4, K4, L4, M4, N4, O4], C1, V3/E1).
np([A, A, B, plus, C, plus, D, E, F, G, H, I, minus, J, minus, K, L, M, N, O, P, Q, R, S, T], =>(np(id:E, exist:plus, of:minus, pl:plus, copula:minus, whin:A, whout:A), (U, V, W, #(E), X)), Y/Z)-->num_quant([A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], U, Y/Z1), $num([A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2], V, Z1/Z1), opt_adj_coord([Z2, A3, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3], W, Z1/Z), #(E), $noun_pl([Y3, Z3, A4, B4, C4, D4, E4, F4, G4, H4, I4, J4, K4, L4, M4, N4, O4, P4, Q4, R4, S4, T4, U4, V4, W4], X, Z/Z).
np([A, A, B, plus, C, minus, D, E, F, G, H, I, minus, J, minus, K, L, M, N, O, P, Q, R, S, T], =>(np(id:E, exist:plus, of:minus, pl:minus, copula:minus, whin:A, whout:A), (U, ['1'], #(E), V, W, >(id:E, human:X, gender:Y, type:noun, hasvar:minus, noun:Z))), A1/B1)-->num_quant([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], U, A1/B2), ['1'], #(E), opt_adj_coord([C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3], V, B2/B3), $noun_sg([C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, X, Y, R3, S3, T3, U3, Z, V3, W3, X3], W, B3/B3), [Y3, Z3, A4, B4, C4, D4, E4, E, F4, G4, H4, I4, J4, K4, L4, X, Y, noun, minus, M4, Z, N4, O4, P4, Q4]>B3/B1.
np([A, plus, B, plus, C, minus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, of:minus, pl:minus, whout:plus), (#(E), [who], >(id:E, human:plus, type:wh, hasvar:minus))), V/W)--> #(E), [who], [X, Y, Z, A1, B1, C1, D1, E, E1, F1, G1, H1, I1, J1, K1, plus, L1, wh, minus, M1, N1, O1, P1, Q1, R1]>V/W.
np([A, plus, B, plus, C, minus, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V], =>(np(id:E, subj:B, exist:plus, rel:F, of:L, embv:I, pl:minus, whout:plus), ([which], W)), X/Y)-->[which], nc([plus, plus, B, Z, A1, B1, C1, E, F, D1, E1, I, F1, G1, L, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1], W, X/Y).
np([A, plus, B, plus, C, plus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, of:minus, pl:plus, whout:plus), ([which], V, #(E), W)), X/Y)-->[which], opt_adj_coord([Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], V, X/Y), #(E), $noun_pl([Y1, Z1, A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2], W, Y/Y).
nc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, minus, O, P, Q, R, S, T, U, V, W, X], =>(nc(id:H, rel:I, of:minus, embv:L, whin:A, whout:B), (Y, Z, >(id:H, human:A1, gender:B1, type:noun, hasvar:C1, noun:D1, var:E1), F1)), G1/H1)-->n([I1, J1, K1, L1, M1, N1, O1, H, P1, Q1, R1, S1, T1, U1, V1, A1, B1, W1, X1, Y1, Z1, D1, A2, B2, C2], Y, G1/D2), opt_newvar([E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, C1, E1, W2, X2, Y2, Z2, A3], Z, D2/B3), [C3, D3, E3, F3, G3, H3, I3, H, J3, K3, L3, M3, N3, O3, P3, A1, B1, noun, C1, E1, D1, Q3, R3, S3, T3]>B3/U3, relcl([A, B, H, V3, W3, X3, Y3, Z3, I, A4, B4, L, C4, D4, E4, A1, F4, G4, H4, I4, J4, K4, L4, M4, N4], F1, U3/H1).
nc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, plus, O, P, Q, R, S, T, U, V, W, X], =>(nc(id:H, subj:C, rel:I, of:plus, embv:L, whin:A, whout:B), (Y, >(id:H, human:Z, gender:A1, type:noun, hasvar:minus, noun:B1), [of], C1)), D1/E1)-->n([F1, G1, H1, I1, J1, K1, L1, H, M1, N1, O1, P1, Q1, R1, S1, Z, A1, T1, U1, V1, W1, B1, X1, Y1, Z1], Y, D1/A2), [B2, C2, D2, E2, F2, G2, H2, H, I2, J2, K2, L2, M2, N2, O2, Z, A1, noun, minus, P2, B1, Q2, R2, S2, T2]>A2/U2, [of], np([A, B, C, V2, W2, X2, acc, Y2, I, Z2, A3, L, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3], C1, U2/O3), ~(D1/O3/E1).
n([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(n(id:H, human:P, gender:Q, text:V), (Z, #(H), A1)), B1/C1)-->opt_adj_coord([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/C1), #(H), $noun_sg([C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, P, Q, R2, S2, T2, U2, V, V2, W2, X2], A1, C1/C1).
opt_newvar([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, minus, S, T, U, V, W, X], =>(opt_newvar(hasvar:minus), []), Y/Y)-->[].
opt_newvar([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, plus, S, T, U, V, W, X], =>(opt_newvar(hasvar:plus, var:S), Y), Z/A1)-->newvar([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, S, U1, V1, W1, X1, Y1], Y, Z/A1).
newvar([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(newvar(var:T), (Z, /<(hasvar:plus, var:T))), A1/B1)--> $var([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, T, X1, Y1, Z1], Z, A1/A1), /<([A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, plus, T, S2, T2, U2, V2, W2], A1/B1).
prop([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(prop(id:H, human:P, gender:Q), Z), A1/A1)--> $prop_sg([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, P, Q, Q1, R1, S1, T1, H, U1, V1, W1], Z, A1/A1).

/* --- Adjectives --- */
opt_adj_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(opt_adj_coord, []), Z/Z)-->[].
opt_adj_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(opt_adj_coord, Z), A1/B1)-->adj_coord([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Z, A1/B1).
adj_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adj_coord, Z), A1/B1)-->adj([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Z, A1/B1).
adj_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adj_coord, (Z, [and], A1)), B1/C1)-->adj([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/C2), [and], adj_coord([D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3], A1, C2/C1).
adj([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adj, Z), A1/A1)--> $adj_itr([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], Z, A1/A1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adjc(subj:C, rel:I, embv:L, whin:A, whout:B), ([as], Z, [as], A1)), B1/C1)-->[as], $adj_itr([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/B1), [as], np([A, B, C, C2, D2, E2, acc, F2, I, G2, H2, L, minus, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2], A1, B1/C1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adjc(subj:C, rel:I, embv:L, whin:A, whout:B), (Z, [than], A1)), B1/C1)--> $adj_itr_comp([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/B1), [than], np([A, B, C, C2, D2, E2, acc, F2, I, G2, H2, L, minus, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2], A1, B1/C1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adjc(subj:C, rel:I, embv:L, whin:A, whout:B), (Z, A1)), B1/C1)--> $adj_tr([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/B1), np([A, B, C, C2, D2, E2, acc, F2, I, G2, H2, L, minus, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2], A1, B1/C1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adjc(subj:C, rel:I, embv:L, whin:A, whout:B), ([as], Z, A1, [as], B1)), C1/D1)-->[as], $adj_tr([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], Z, C1/C1), np([A, D2, C, E2, F2, G2, acc, H2, minus, I2, J2, L, minus, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], A1, C1/W2), [as], np([D2, B, C, X2, Y2, Z2, acc, A3, I, B3, C3, L, minus, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3], B1, W2/D1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adjc(subj:C, rel:I, embv:L, whin:A, whout:B), ([as], Z, A1, [as], B1, C1)), D1/E1)-->[as], $adj_tr([F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], Z, D1/D1), np([A, E2, C, F2, G2, H2, acc, I2, minus, J2, K2, L, minus, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2], A1, D1/X2), [as], $adj_prep([Y2, Z2, A3, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, C2, V3], B1, X2/X2), np([E2, B, C, W3, X3, Y3, acc, Z3, I, A4, B4, L, minus, C4, D4, E4, F4, G4, H4, I4, J4, K4, L4, M4, N4], C1, X2/E1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adjc(subj:C, rel:I, embv:L, whin:A, whout:B), (Z, A1, [than], B1)), C1/D1)--> $adj_tr_comp([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], Z, C1/C1), np([A, D2, C, E2, F2, G2, acc, H2, minus, I2, J2, L, minus, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], A1, C1/W2), [than], np([D2, B, C, X2, Y2, Z2, acc, A3, I, B3, C3, L, minus, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3], B1, W2/D1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adjc(subj:C, rel:I, embv:L, whin:A, whout:B), (Z, A1, [than], B1, C1)), D1/E1)--> $adj_tr_comp([F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], Z, D1/D1), np([A, E2, C, F2, G2, H2, acc, I2, minus, J2, K2, L, minus, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2], A1, D1/X2), [than], $adj_prep([Y2, Z2, A3, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, C2, V3], B1, X2/X2), np([E2, B, C, W3, X3, Y3, acc, Z3, I, A4, B4, L, minus, C4, D4, E4, F4, G4, H4, I4, J4, K4, L4, M4, N4], C1, X2/E1).

/* --- Relative Clauses --- */
relcl([A, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(relcl(whin:A, whout:A), []), Y/Y)-->[].
relcl([A, B, C, D, E, F, G, H, plus, I, J, plus, K, L, M, N, O, P, Q, R, S, T, U, V, W], =>(relcl(subj:C, rel:plus, embv:plus, human:N, whin:A, whout:B), (X, Y)), Z/A1)-->relpron([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, N, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], X, Z/Z1), relcl1([A, B, C, A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, N, M2, N2, O2, P2, Q2, R2, S2, T2, Y1], Y, Z1/A1).
relcl1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(relcl1(subj:C, human:P, relpron:Y, whin:A, whout:B), Z), A1/B1)-->relcl2([A, B, C, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, P, O1, P1, Q1, R1, S1, T1, U1, V1, Y], Z, A1/B1).
relcl2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(relcl2(subj:C, rel:I, relpron:Y, human:P, whin:A, whout:B), (Z, A1, B1)), C1/D1)-->vp([A, E1, C, F1, G1, minus, H1, I1, minus, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], Z, C1/Z1), and_relpron([A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P, P2, Q2, R2, S2, T2, U2, V2, W2, Y], A1, Z1/X2), relcl2([E1, B, C, Y2, Z2, A3, B3, C3, I, D3, E3, F3, G3, H3, I3, P, J3, K3, L3, M3, N3, O3, P3, Q3, Y], B1, X2/D1).
relcl2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(relcl2(subj:C, rel:I, whin:A, whout:B), Z), A1/B1)-->vp([A, B, C, C1, D1, minus, E1, F1, I, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1], Z, A1/B1).
relcl2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(relcl2(subj:C, rel:I, whin:A, whout:B), (Z, A1, B1, C1)), D1/E1)-->np([A, F1, C, G1, H1, I1, nom, J1, minus, K1, L1, M1, minus, N1, O1, P1, Q1, R1, S1, T1, U1, V1, minus, W1, X1], Z, D1/Y1), aux([Z1, A2, B2, C2, D2, I1, E2, F2, G2, minus, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], A1, Y1/W2), verb([X2, Y2, Z2, A3, B3, I1, C3, D3, E3, minus, inf, F3, G3, tr, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3], B1, W2/S3), vmod([F1, B, J1, T3, U3, V3, W3, X3, I, Y3, Z3, M1, minus, A4, B4, C4, D4, E4, F4, G4, H4, I4, J4, K4, L4], C1, S3/M4), ~(D1/M4/E1).
relcl2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(relcl2(subj:C, rel:I, whin:A, whout:B), (Z, A1, B1)), C1/D1)-->np([A, E1, C, F1, G1, H1, nom, I1, minus, J1, K1, L1, minus, M1, N1, O1, P1, Q1, R1, S1, T1, U1, minus, V1, W1], Z, C1/X1), verb([Y1, Z1, A2, B2, C2, H1, D2, E2, F2, minus, fin, G2, H2, tr, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2], A1, X1/T2), vmod([E1, B, I1, U2, V2, W2, X2, Y2, I, Z2, A3, L1, minus, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3], B1, T2/N3), ~(C1/N3/D1).
relpron([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, plus, P, Q, R, S, T, U, V, W, who], =>(relpron(human:plus, relpron:who), [who]), X/X)-->[who].
and_relpron([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(and_relpron(human:P, relpron:Y), ([and], Z)), A1/B1)-->[and], relpron([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, P, R1, S1, T1, U1, V1, W1, X1, Y1, Y], Z, A1/B1).

/* --- Verb Phrase Modifiers --- */
/* Verb phrase modifiers are represented by 'vmod' and the auxiliary category 'vmod_x',
		and are always optional: */
vmod([A, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(vmod(whin:A, whout:A), []), Y/Y)-->[].
vmod([A, B, C, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(vmod(subj:C, rel:I, embv:minus, copula:L, whin:A, whout:B), (Y, Z)), A1/B1)-->adv_coord([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, L, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], Y, A1/A2), vmod_x([A, B, C, B2, C2, D2, E2, F2, I, G2, H2, I2, L, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2], Z, A2/B1).
vmod([A, B, C, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(vmod(subj:C, rel:I, embv:minus, copula:L, whin:A, whout:B), (Y, Z)), A1/B1)-->pp([A, C1, C, D1, E1, F1, G1, H1, I, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], Y, A1/Y1), vmod([C1, B, C, Z1, A2, B2, C2, D2, I, E2, F2, K1, L, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2], Z, Y1/B1).
vmod_x([A, A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(vmod_x(whin:A, whout:A), []), Y/Y)-->[].
vmod_x([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vmod_x(subj:C, rel:I, copula:M, whin:A, whout:B), (Z, A1)), B1/C1)-->pp([A, D1, C, E1, F1, G1, H1, I1, I, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], Z, B1/Z1), vmod([D1, B, C, A2, B2, C2, D2, E2, I, F2, G2, L1, M, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2], A1, Z1/C1).
pp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(pp(subj:C, rel:I, embv:L, whin:A, whout:B), (Z, A1)), B1/C1)--> $prep([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/B1), np([A, B, C, C2, D2, E2, acc, F2, I, G2, H2, L, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2], A1, B1/C1).
adv_coord([A, B, C, D, E, F, G, H, I, J, K, L, minus, M, N, O, P, Q, R, S, T, U, V, W, X], =>(adv_coord(copula:minus), Y), Z/A1)-->adv_phrase([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], Y, Z/A1).
adv_coord([A, B, C, D, E, F, G, H, I, J, K, L, minus, M, N, O, P, Q, R, S, T, U, V, W, X], =>(adv_coord(copula:minus), (Y, [and], Z)), A1/B1)-->adv_phrase([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Y, A1/B2), [and], adv_coord([C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3], Z, B2/B1).
adv_phrase([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adv_phrase, Z), A1/A1)--> $adv([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], Z, A1/A1).

/* --- Verbs --- */
verb([A, B, C, D, E, minus, F, G, H, minus, fin, I, J, itr, K, L, M, N, O, P, Q, R, S, T, U], =>(verb(be:minus, vcat:itr, pl:minus, vform:fin), V), W/W)--> $iv_finsg([X, Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1], V, W/W).
verb([A, B, C, D, E, plus, F, G, H, minus, fin, I, J, itr, K, L, M, N, O, P, Q, R, S, T, U], =>(verb(be:minus, vcat:itr, pl:plus, vform:fin), V), W/W)--> $iv_infpl([X, Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1], V, W/W).
verb([A, B, C, D, E, F, G, H, I, minus, inf, J, K, itr, L, M, N, O, P, Q, R, S, T, U, V], =>(verb(be:minus, vcat:itr, vform:inf), W), X/X)--> $iv_infpl([Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1], W, X/X).
verb([A, B, C, D, E, minus, F, G, H, minus, fin, I, J, tr, K, L, M, N, O, P, Q, R, S, T, U], =>(verb(be:minus, vcat:tr, pl:minus, vform:fin), V), W/W)--> $tv_finsg([X, Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1], V, W/W).
verb([A, B, C, D, E, plus, F, G, H, minus, fin, I, J, tr, K, L, M, N, O, P, Q, R, S, T, U], =>(verb(be:minus, vcat:tr, pl:plus, vform:fin), V), W/W)--> $tv_infpl([X, Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1], V, W/W).
verb([A, B, C, D, E, F, G, H, I, minus, inf, J, K, tr, L, M, N, O, P, Q, R, S, T, U, V], =>(verb(be:minus, vcat:tr, vform:inf), W), X/X)--> $tv_infpl([Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1], W, X/X).
verb([A, B, C, D, E, F, G, H, I, plus, J, K, L, tr, M, N, O, P, Q, R, S, T, U, V, W], =>(verb(be:plus, vcat:tr), X), Y/Y)--> $tv_pp([Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], X, Y/Y).
aux([A, B, C, plus, D, minus, E, F, G, plus, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V], =>(aux(be:plus, exist:plus, pl:minus), [is]), W/W)-->[is].
aux([A, B, C, minus, D, minus, E, F, G, plus, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V], =>(aux(be:plus, exist:minus, pl:minus), (//, [is, not])), W/X)-->[Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1]// (W/X), [is, not].
aux([A, B, C, plus, D, plus, E, F, G, plus, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V], =>(aux(be:plus, exist:plus, pl:plus), [are]), W/W)-->[are].
aux([A, B, C, minus, D, plus, E, F, G, plus, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V], =>(aux(be:plus, exist:minus, pl:plus), (//, [are, not])), W/X)-->[Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1]// (W/X), [are, not].
aux([A, B, C, minus, D, minus, E, F, G, minus, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V], =>(aux(be:minus, exist:minus, pl:minus), (//, ['does not'])), W/X)-->[Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1]// (W/X), ['does not'].
aux([A, B, C, minus, D, plus, E, F, G, minus, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V], =>(aux(be:minus, exist:minus, pl:plus), (//, ['do not'])), W/X)-->[Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1]// (W/X), ['do not'].

/* --- Quantifiers --- */
quant([A, B, C, plus, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(quant(exist:plus), [a]), Y/Y)-->[a].
quant([A, B, C, minus, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(quant(exist:minus), (//, [every])), Y/Z)-->[A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1]// (Y/Z), [every].
num_quant([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(num_quant, [exactly]), Z/Z)-->[exactly].

/* --- Indefinite Pronouns --- */
ipron([A, B, C, plus, D, E, F, G, H, I, J, K, L, M, N, plus, O, P, Q, R, S, T, U, V, W], =>(ipron(exist:plus, human:plus), [somebody]), X/X)-->[somebody].
ipron([A, B, C, minus, D, E, F, G, H, I, J, K, L, M, N, plus, O, P, Q, R, S, T, U, V, W], =>(ipron(exist:minus, human:plus), (//, [everybody])), X/Y)-->[Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1]// (X/Y), [everybody].

/* --- Anaphoric Pronouns --- */
$pron([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, plus, fem, P, Q, R, S, T, plus, U, V], =>($pron(refl:plus, human:plus, gender:fem), [herself]), W/W)-->[herself].
$pron([A, B, C, D, E, F, nom, G, H, I, J, K, L, M, N, plus, fem, O, P, Q, R, S, minus, T, U], =>($pron(refl:minus, case:nom, human:plus, gender:fem), [she]), V/V)-->[she].
$pron([A, B, C, D, E, F, acc, G, H, I, J, K, L, M, N, plus, fem, O, P, Q, R, S, minus, T, U], =>($pron(refl:minus, case:acc, human:plus, gender:fem), [her]), V/V)-->[her].

/* --- Lexicon --- */
$prop_sg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, plus, fem, P, Q, R, S, 'Mary', T, U, V], =>($prop_sg(human:plus, gender:fem, text:'Mary'), ['Mary']), W/W)-->['Mary'].
$def_noun_sg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, woman, U, V, W, X], =>($def_noun_sg(noun:woman), ['the woman']), Y/Y)-->['the woman'].
$ref([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, 'X', V, W, X], =>($ref(text:'X'), ['X']), Y/Y)-->['X'].
$num([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($num, ['2']), Z/Z)-->['2'].
$noun_pl([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($noun_pl, [women]), Z/Z)-->[women].
$noun_sg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, plus, fem, P, Q, R, S, woman, T, U, V], =>($noun_sg(text:woman, human:plus, gender:fem), [woman]), W/W)-->[woman].
$var([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, 'X', V, W, X], =>($var(text:'X'), ['X']), Y/Y)-->['X'].
$iv_finsg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($iv_finsg, [waits]), Z/Z)-->[waits].
$iv_infpl([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($iv_infpl, [wait]), Z/Z)-->[wait].
$tv_finsg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($tv_finsg, [asks]), Z/Z)-->[asks].
$tv_infpl([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($tv_infpl, [ask]), Z/Z)-->[ask].
$tv_pp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($tv_pp, [asked]), Z/Z)-->[asked].
$adj_itr([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($adj_itr, [young]), Z/Z)-->[young].
$adj_itr_comp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($adj_itr_comp, [younger]), Z/Z)-->[younger].
$adj_tr([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, about, X], =>($adj_tr(prep:about), ['mad-about']), Y/Y)-->['mad-about'].
$adj_tr_comp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, about, X], =>($adj_tr_comp(prep:about), ['madder-about']), Y/Y)-->['madder-about'].
$adj_prep([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, about, X], =>($adj_prep(prep:about), [about]), Y/Y)-->[about].
$prep([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($prep, [for]), Z/Z)-->[for].
$adv([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>($adv, [early]), Z/Z)-->[early].

/* --- Auxiliary Rules for Testing --- */
test([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(test, (Z, A1)), B1/C1)-->complete_sentence([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/C2), fill([D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3], A1, C2/C1).
fill([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(fill, []), Z/Z)-->[].
fill([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(fill, ([''], Z)), A1/B1)-->[''], fill([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Z, A1/B1).


~(I/T/O) --> {append([X,[//|N],I],T), \+ member(//,N), findall(>>(R),member(>>(R),X),Y), append([Y,N,I],O)}, !.
~(_/O/O) --> [].
//(_, T/[//|T]) --> [].
>(F, T/[>(F)|T]) --> [].
>>(F, T/[>>(F)|T]) --> [].
<(L, [R|T]/[R|T]) --> {R =.. [_,Q], \+ member(-Q, L), \+ \+ member(+Q, L), !, member(+Q, L)}.
<(L, [R|T]/[R|T]) --> <(L,T/T).
/<(F, T/T) --> {\+ (member(R,T), R =.. [_,F])}, !.
#(#(P),L,L) :- length(L,P).
