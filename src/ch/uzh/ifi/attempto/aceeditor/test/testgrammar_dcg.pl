% This code is automatically generated on the basis of a file in Codeco notation.
%
% For more information, see the package ch.uzh.ifi.attempto.codeco of the AceWiki system
% (http://attempto.ifi.uzh.ch/acewiki/) and the thesis "Controlled English for Knowledge
% Representation" (http://attempto.ifi.uzh.ch/site/pubs/papers/doctoral_thesis_kuhn.pdf).


/* === ACE Editor Grammar === */
/* - Tobias Kuhn, 26 November 2010 - */

/* --- Texts and Sentences --- */
complete_sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(complete_sentence, (A1, ['.'])), B1/C1)-->sentence([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], A1, B1/C1), ['.'].
complete_sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(complete_sentence, (//, A1, [?])), B1/C1)-->[D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2]// (B1/D2), simple_sentence_2([plus, minus, plus, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3], A1, D2/B3), [?], ~(B1/B3/C1).
sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(sentence, A1), B1/C1)-->sentence_coord_1([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], A1, B1/C1).
sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(sentence, (//, ['for every'], A1, B1)), C1/D1)-->[E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2]// (C1/E2), ['for every'], nc([minus, F2, G2, minus, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3, C3], A1, E2/D3), sentence_coord_1([E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3, Y3, Z3, A4, B4, C4, D4], B1, D3/E4), ~(C1/E4/D1).
sentence([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(sentence, (//, [if], A1, [then], B1)), C1/D1)-->[E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2]// (C1/E2), [if], sentence_coord_1([F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3, C3, D3, E3], A1, E2/F3), [then], sentence_coord_1([G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3, Y3, Z3, A4, B4, C4, D4, E4, F4], B1, F3/G4), ~(C1/G4/D1).
sentence_coord_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(sentence_coord_1, A1), B1/C1)-->sentence_coord_2([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], A1, B1/C1).
sentence_coord_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(sentence_coord_2, A1), B1/C1)-->simple_sentence_1([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], A1, B1/C1).
sentence_coord_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(sentence_coord_2, (A1, [and], B1)), C1/D1)-->simple_sentence_1([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], A1, C1/E2), [and], sentence_coord_2([F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3, C3, D3, E3], B1, E2/D1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(simple_sentence_1, (//, ['it is false that'], A1)), B1/C1)-->[D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2]// (B1/D2), ['it is false that'], simple_sentence_2([minus, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3, C3], A1, D2/D3), ~(B1/D3/C1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(simple_sentence_1, (['there is'], A1)), B1/C1)-->['there is'], np([minus, D1, E1, minus, plus, minus, minus, nom, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1], A1, B1/C1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(simple_sentence_1, (['there is'], A1, ['such that'], B1)), C1/D1)-->['there is'], np([minus, E1, F1, minus, plus, minus, minus, nom, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], A1, C1/Y1), ['such that'], simple_sentence_1([Z1, A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2], B1, Y1/D1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(simple_sentence_1, (['there are'], A1)), B1/C1)-->['there are'], np([minus, D1, E1, minus, plus, minus, plus, nom, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1], A1, B1/C1).
simple_sentence_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(simple_sentence_1, A1), B1/C1)-->simple_sentence_2([minus, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], A1, B1/C1).
simple_sentence_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(simple_sentence_2(qu:A, whin:B, whout:C), (A1, B1)), C1/D1)-->np([A, B, E1, minus, F1, G1, H1, nom, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], A1, C1/A2), vp_coord_1([A, E1, C, I1, B2, C2, H1, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], B1, A2/W2), ~(C1/W2/D1).

/* --- Verb Phrases --- */
vp_coord_1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(vp_coord_1(subj:D, pl:G, qu:A, whin:B, whout:C), A1), B1/C1)-->vp_coord_2([A, B, C, D, D1, E1, G, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], A1, B1/C1).
vp_coord_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(vp_coord_2(subj:D, pl:G, qu:A, whin:B, whout:C), A1), B1/C1)-->vp([A, B, C, D, D1, E1, G, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], A1, B1/C1).
vp_coord_2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(vp_coord_2(subj:D, pl:G, qu:A, whin:B, whout:C), (A1, [and], B1)), C1/D1)-->vp([A, B, E1, D, F1, G1, G, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], A1, C1/A2), [and], vp_coord_2([A, E1, C, D, B2, C2, G, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], B1, A2/D1).
vp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(vp(subj:D, exist:E, rel:J, pl:G, qu:A, whin:B, whout:C), (A1, B1, C1)), D1/E1)-->aux([F1, G1, H1, I1, E, J1, G, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], A1, D1/D2), v([A, B, E2, D, E, F2, G, G2, H2, J, N1, inf, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], B1, D2/W2), vmod([A, E2, C, D, X2, Y2, Z2, A3, B3, C3, D3, E3, I2, J2, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3], C1, W2/R3), ~(D1/R3/E1).
vp([A, B, C, D, plus, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vp(subj:D, exist:plus, rel:I, pl:F, qu:A, whin:B, whout:C), (Z, A1)), B1/C1)-->v([A, B, D1, D, plus, E1, F, F1, G1, I, minus, fin, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1], Z, B1/V1), vmod([A, D1, C, D, W1, X1, Y1, Z1, A2, B2, C2, D2, H1, I1, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2], A1, V1/Q2), ~(B1/Q2/C1).
v([A, B, B, C, D, E, F, G, H, I, minus, J, K, minus, L, M, N, O, P, Q, R, S, T, U, V, W], =>(v(be:minus, pl:F, vform:J, copula:minus, whin:B, whout:B), X), Y/Z)-->verb([A1, B1, C1, D1, E1, F1, F, G1, H1, I1, minus, J, J1, K1, itr, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1], X, Y/Z).
v([A, B, C, D, E, F, G, H, I, J, minus, K, L, minus, M, N, O, P, Q, R, S, T, U, V, W, X], =>(v(subj:D, be:minus, rel:J, pl:G, vform:K, embv:L, copula:minus, qu:A, whin:B, whout:C), (Y, Z)), A1/B1)-->verb([C1, D1, E1, F1, G1, H1, G, I1, J1, K1, minus, K, L1, M1, tr, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], Y, A1/Y1), np([A, B, C, D, Z1, A2, B2, acc, C2, J, D2, E2, L, F2, tr, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2], Z, Y1/B1).
v([A, B, C, D, E, F, G, H, I, J, plus, K, L, minus, M, N, O, P, Q, R, S, T, U, V, W, X], =>(v(subj:D, be:plus, rel:J, embv:L, copula:minus, qu:A, whin:B, whout:C), (Y, [by], Z)), A1/B1)-->verb([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, plus, M1, N1, O1, tr, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], Y, A1/A2), [by], np([A, B, C, D, B2, C2, D2, acc, E2, J, F2, G2, L, minus, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2], Z, A2/B1).
v([A, B, C, D, E, F, G, H, I, J, plus, K, L, plus, M, N, O, P, Q, R, S, T, U, V, W, X], =>(v(subj:D, be:plus, rel:J, embv:L, copula:plus, qu:A, whin:B, whout:C), Y), Z/A1)-->np([A, B, C, D, B1, C1, minus, acc, D1, J, E1, F1, L, plus, G1, plus, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1], Y, Z/A1).
v([A, B, C, D, E, F, minus, G, H, I, plus, J, K, plus, L, M, N, O, P, Q, R, S, T, U, V, W], =>(v(subj:D, be:plus, rel:I, pl:minus, embv:K, copula:plus, qu:A, whin:B, whout:C), X), Y/Z)-->np([A, B, C, D, A1, B1, minus, acc, C1, I, D1, E1, K, plus, F1, minus, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1], X, Y/Z).
v([A, B, B, C, D, E, F, G, H, I, plus, J, K, plus, L, M, N, O, P, Q, R, S, T, U, V, W], =>(v(be:plus, copula:plus, whin:B, whout:B), X), Y/Z)-->adj_coord([A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], X, Y/Z).
v([A, B, C, D, E, F, G, H, I, J, plus, K, L, plus, M, N, O, P, Q, R, S, T, U, V, W, X], =>(v(subj:D, be:plus, rel:J, embv:L, copula:plus, qu:A, whin:B, whout:C), Y), Z/A1)-->adjc([A, B, C, D, B1, C1, D1, E1, F1, J, G1, H1, L, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1], Y, Z/A1).

/* --- Noun Phrases --- */
np([A, B, C, D, plus, plus, minus, E, F, G, H, I, J, K, L, minus, M, N, O, P, Q, R, S, T, U, V], =>(np(id:F, exist:plus, rel:G, of:minus, def:plus, pl:minus, embv:J, qu:A, whin:B, whout:C), (W, >>(id:F, human:X, gender:Y, type:prop, hasvar:minus), Z)), A1/B1)-->prop([C1, D1, E1, F1, G1, H1, I1, J1, F, K1, L1, M1, N1, O1, P1, Q1, X, Y, R1, S1, T1, U1, V1, W1, X1, Y1], W, A1/Z1), [A2, B2, C2, D2, E2, F2, G2, H2, F, I2, J2, K2, L2, M2, N2, O2, X, Y, prop, minus, P2, Q2, R2, S2, T2, U2]>> (Z1/V2), relcl([A, B, C, F, W2, X2, Y2, Z2, A3, G, B3, C3, J, D3, E3, F3, X, G3, H3, I3, J3, K3, L3, M3, N3, O3], Z, V2/B1).
np([A, B, B, C, plus, plus, minus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, of:minus, def:plus, pl:minus, whin:B, whout:B), (#(E), V, >(id:E, type:var, hasvar:plus, var:W))), X/Y)--> #(E), newvar([Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, W, T1, U1, V1, W1, X1], V, X/Y1), [Z1, A2, B2, C2, D2, E2, F2, G2, E, H2, I2, J2, K2, L2, M2, N2, O2, P2, var, plus, W, Q2, R2, S2, T2, U2]>Y1/Y.
np([A, B, B, C, plus, plus, minus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, of:minus, def:plus, pl:minus, whin:B, whout:B), (V, W, <(id:E, type:noun, hasvar:plus, noun:X, var:Y, human:Z, gender:A1), >(id:E, human:Z, gender:A1, type:ref, hasvar:minus))), B1/C1)--> $def_noun_sg([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, X, Y1, Z1, A2, B2], V, B1/B1), $ref([C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y, Y2, Z2, A3], W, B1/B1), [+[B3, C3, D3, E3, F3, G3, H3, I3, E, J3, K3, L3, M3, N3, O3, P3, Z, A1, noun, plus, Y, X, Q3, R3, S3, T3]]<B1/U3, [V3, W3, X3, Y3, Z3, A4, B4, C4, E, D4, E4, F4, G4, H4, I4, J4, Z, A1, ref, minus, K4, L4, M4, N4, O4, P4]>U3/C1.
np([A, B, B, C, plus, plus, minus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, of:minus, def:plus, pl:minus, whin:B, whout:B), (V, <(id:E, type:noun, noun:W, human:X, gender:Y), >(id:E, human:X, gender:Y, type:ref, hasvar:minus))), Z/A1)--> $def_noun_sg([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W, W1, X1, Y1, Z1], V, Z/Z), [+[A2, B2, C2, D2, E2, F2, G2, H2, E, I2, J2, K2, L2, M2, N2, O2, X, Y, noun, P2, Q2, W, R2, S2, T2, U2]]<Z/V2, [W2, X2, Y2, Z2, A3, B3, C3, D3, E, E3, F3, G3, H3, I3, J3, K3, X, Y, ref, minus, L3, M3, N3, O3, P3, Q3]>V2/A1.
np([A, B, B, C, plus, plus, minus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, of:minus, def:plus, pl:minus, whin:B, whout:B), (V, <(id:E, hasvar:plus, var:W, human:X, gender:Y), >(id:E, human:X, gender:Y, type:ref, hasvar:minus))), Z/A1)--> $ref([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, W, X1, Y1, Z1], V, Z/Z), [+[A2, B2, C2, D2, E2, F2, G2, H2, E, I2, J2, K2, L2, M2, N2, O2, X, Y, P2, plus, W, Q2, R2, S2, T2, U2]]<Z/V2, [W2, X2, Y2, Z2, A3, B3, C3, D3, E, E3, F3, G3, H3, I3, J3, K3, X, Y, ref, minus, L3, M3, N3, O3, P3, Q3]>V2/A1.
np([A, B, B, C, plus, plus, minus, D, C, E, F, G, H, I, J, minus, K, L, M, N, O, P, Q, plus, R, S], =>(np(id:C, subj:C, exist:plus, of:minus, def:plus, pl:minus, refl:plus, whin:B, whout:B), (T, <(id:C, human:U, gender:V))), W/X)--> $pron([Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, U, V, O1, P1, Q1, R1, S1, plus, T1, U1], T, W/W), [+[V1, W1, X1, Y1, Z1, A2, B2, C2, C, D2, E2, F2, G2, H2, I2, J2, U, V, K2, L2, M2, N2, O2, P2, Q2, R2]]<W/X.
np([A, B, B, C, plus, plus, minus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, minus, S, T], =>(np(id:E, subj:C, exist:plus, of:minus, def:plus, pl:minus, refl:minus, case:D, whin:B, whout:B), (U, +(id:E, human:V, gender:W)< - (id:C), >(id:E, human:V, gender:W, type:pron, hasvar:minus))), X/Y)--> $pron([Z, A1, B1, C1, D1, E1, F1, D, G1, H1, I1, J1, K1, L1, M1, N1, V, W, O1, P1, Q1, R1, S1, minus, T1, U1], U, X/X), [+[V1, W1, X1, Y1, Z1, A2, B2, C2, E, D2, E2, F2, G2, H2, I2, J2, V, W, K2, L2, M2, N2, O2, P2, Q2, R2], -[S2, T2, U2, V2, W2, X2, Y2, Z2, C, A3, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3]]<X/R3, [S3, T3, U3, V3, W3, X3, Y3, Z3, E, A4, B4, C4, D4, E4, F4, G4, V, W, pron, minus, H4, I4, J4, K4, L4, M4]>R3/Y.
np([A, B, C, D, E, F, minus, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(np(id:H, subj:D, exist:E, rel:I, of:O, pl:minus, embv:L, qu:A, whin:B, whout:C), (Z, A1)), B1/C1)-->quant([D1, E1, F1, G1, E, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/C2), nc([A, B, C, D, D2, E2, F2, G2, H, I, H2, I2, L, J2, K2, O, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2], A1, C2/C1).
np([A, B, C, D, E, F, minus, G, H, I, J, K, L, M, N, minus, O, P, Q, R, S, T, U, V, W, X], =>(np(id:H, exist:E, rel:I, of:minus, pl:minus, embv:L, qu:A, whin:B, whout:C), (#(H), Y, Z, >(id:H, human:A1, type:ipron, hasvar:B1, var:C1), D1)), E1/F1)--> #(H), ipron([G1, H1, I1, J1, E, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, A1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], Y, E1/E2), opt_newvar([F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, B1, C1, Y2, Z2, A3, B3, C3], Z, E2/D3), [E3, F3, G3, H3, I3, J3, K3, L3, H, M3, N3, O3, P3, Q3, R3, S3, A1, T3, ipron, B1, C1, U3, V3, W3, X3, Y3]>D3/Z3, relcl([A, B, C, H, A4, B4, C4, D4, E4, I, F4, G4, L, H4, I4, J4, A1, K4, L4, M4, N4, O4, P4, Q4, R4, S4], D1, Z3/F1).
np([A, B, B, C, plus, D, plus, E, F, G, H, I, J, minus, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:F, exist:plus, of:minus, pl:plus, copula:minus, whin:B, whout:B), (V, W, X, #(F), Y)), Z/A1)-->num_quant([B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], V, Z/B2), $num([C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3], W, B2/B2), opt_adj_coord([C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3, Y3, Z3, A4, B4], X, B2/A1), #(F), $noun_pl([C4, D4, E4, F4, G4, H4, I4, J4, K4, L4, M4, N4, O4, P4, Q4, R4, S4, T4, U4, V4, W4, X4, Y4, Z4, A5, B5], Y, A1/A1).
np([A, B, B, C, plus, D, minus, E, F, G, H, I, J, minus, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:F, exist:plus, of:minus, pl:minus, copula:minus, whin:B, whout:B), (V, ['1'], #(F), W, X, >(id:F, human:Y, gender:Z, type:noun, hasvar:minus, noun:A1))), B1/C1)-->num_quant([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], V, B1/D2), ['1'], #(F), opt_adj_coord([E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3, C3, D3], W, D2/E3), $noun_sg([F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, Y, Z, V3, W3, X3, Y3, A1, Z3, A4, B4], X, E3/E3), [C4, D4, E4, F4, G4, H4, I4, J4, F, K4, L4, M4, N4, O4, P4, Q4, Y, Z, noun, minus, R4, A1, S4, T4, U4, V4]>E3/C1.
np([plus, A, plus, B, plus, C, minus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, of:minus, pl:minus, qu:plus, whout:plus), (#(E), [who], >(id:E, human:plus, type:wh, hasvar:minus))), V/W)--> #(E), [who], [X, Y, Z, A1, B1, C1, D1, E1, E, F1, G1, H1, I1, J1, K1, L1, plus, M1, wh, minus, N1, O1, P1, Q1, R1, S1]>V/W.
np([plus, A, plus, B, plus, C, minus, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V], =>(np(id:E, subj:B, exist:plus, rel:F, of:L, embv:I, pl:minus, qu:plus, whout:plus), ([which], W)), X/Y)-->[which], nc([plus, plus, plus, B, Z, A1, B1, C1, E, F, D1, E1, I, F1, G1, L, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1], W, X/Y).
np([plus, A, plus, B, plus, C, plus, D, E, F, G, H, I, J, K, minus, L, M, N, O, P, Q, R, S, T, U], =>(np(id:E, exist:plus, of:minus, pl:plus, qu:plus, whout:plus), ([which], V, #(E), W)), X/Y)-->[which], opt_adj_coord([Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], V, X/Y), #(E), $noun_pl([Z1, A2, B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2], W, Y/Y).
nc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, minus, P, Q, R, S, T, U, V, W, X, Y], =>(nc(id:I, rel:J, of:minus, embv:M, qu:A, whin:B, whout:C), (Z, A1, >(id:I, human:B1, gender:C1, type:noun, hasvar:D1, noun:E1, var:F1), G1)), H1/I1)-->n([J1, K1, L1, M1, N1, O1, P1, Q1, I, R1, S1, T1, U1, V1, W1, X1, B1, C1, Y1, Z1, A2, B2, E1, C2, D2, E2], Z, H1/F2), opt_newvar([G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, D1, F1, Z2, A3, B3, C3, D3], A1, F2/E3), [F3, G3, H3, I3, J3, K3, L3, M3, I, N3, O3, P3, Q3, R3, S3, T3, B1, C1, noun, D1, F1, E1, U3, V3, W3, X3]>E3/Y3, relcl([A, B, C, I, Z3, A4, B4, C4, D4, J, E4, F4, M, G4, H4, I4, B1, J4, K4, L4, M4, N4, O4, P4, Q4, R4], G1, Y3/I1).
nc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, plus, P, Q, R, S, T, U, V, W, X, Y], =>(nc(id:I, subj:D, rel:J, of:plus, embv:M, qu:A, whin:B, whout:C), (Z, >(id:I, human:A1, gender:B1, type:noun, hasvar:minus, noun:C1), [of], D1)), E1/F1)-->n([G1, H1, I1, J1, K1, L1, M1, N1, I, O1, P1, Q1, R1, S1, T1, U1, A1, B1, V1, W1, X1, Y1, C1, Z1, A2, B2], Z, E1/C2), [D2, E2, F2, G2, H2, I2, J2, K2, I, L2, M2, N2, O2, P2, Q2, R2, A1, B1, noun, minus, S2, C1, T2, U2, V2, W2]>C2/X2, [of], np([A, B, C, D, Y2, Z2, A3, acc, B3, J, C3, D3, M, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3], D1, X2/R3), ~(E1/R3/F1).
n([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(n(id:I, human:Q, gender:R, text:W), (A1, #(I), B1)), C1/D1)-->opt_adj_coord([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], A1, C1/D1), #(I), $noun_sg([E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, Q, R, U2, V2, W2, X2, W, Y2, Z2, A3], B1, D1/D1).
opt_newvar([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, minus, T, U, V, W, X, Y], =>(opt_newvar(hasvar:minus), []), Z/Z)-->[].
opt_newvar([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, plus, T, U, V, W, X, Y], =>(opt_newvar(hasvar:plus, var:T), Z), A1/B1)-->newvar([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, T, W1, X1, Y1, Z1, A2], Z, A1/B1).
newvar([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(newvar(var:U), (A1, /<(hasvar:plus, var:U))), B1/C1)--> $var([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, U, Z1, A2, B2], A1, B1/B1), /<([C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, plus, U, V2, W2, X2, Y2, Z2], B1/C1).
prop([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(prop(id:I, human:Q, gender:R), A1), B1/B1)--> $prop_sg([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, Q, R, S1, T1, U1, V1, I, W1, X1, Y1], A1, B1/B1).

/* --- Adjectives --- */
opt_adj_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(opt_adj_coord, []), A1/A1)-->[].
opt_adj_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(opt_adj_coord, A1), B1/C1)-->adj_coord([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], A1, B1/C1).
adj_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adj_coord, A1), B1/C1)-->adj([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], A1, B1/C1).
adj_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adj_coord, (A1, [and], B1)), C1/D1)-->adj([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], A1, C1/E2), [and], adj_coord([F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3, C3, D3, E3], B1, E2/D1).
adj([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adj, A1), B1/B1)--> $adj_itr([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], A1, B1/B1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adjc(subj:D, rel:J, embv:M, qu:A, whin:B, whout:C), ([as], A1, [as], B1)), C1/D1)-->[as], $adj_itr([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], A1, C1/C1), [as], np([A, B, C, D, E2, F2, G2, acc, H2, J, I2, J2, M, minus, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], B1, C1/D1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adjc(subj:D, rel:J, embv:M, qu:A, whin:B, whout:C), (A1, [than], B1)), C1/D1)--> $adj_itr_comp([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], A1, C1/C1), [than], np([A, B, C, D, E2, F2, G2, acc, H2, J, I2, J2, M, minus, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], B1, C1/D1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adjc(subj:D, rel:J, embv:M, qu:A, whin:B, whout:C), (A1, B1)), C1/D1)--> $adj_tr([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], A1, C1/C1), np([A, B, C, D, E2, F2, G2, acc, H2, J, I2, J2, M, minus, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2], B1, C1/D1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adjc(subj:D, rel:J, embv:M, qu:A, whin:B, whout:C), ([as], A1, B1, [as], C1)), D1/E1)-->[as], $adj_tr([F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2, E2], A1, D1/D1), np([A, B, F2, D, G2, H2, I2, acc, J2, minus, K2, L2, M, minus, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2], B1, D1/Y2), [as], np([A, F2, C, D, Z2, A3, B3, acc, C3, J, D3, E3, M, minus, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3], C1, Y2/E1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adjc(subj:D, rel:J, embv:M, qu:A, whin:B, whout:C), ([as], A1, B1, [as], C1, D1)), E1/F1)-->[as], $adj_tr([G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2, E2, F2], A1, E1/E1), np([A, B, G2, D, H2, I2, J2, acc, K2, minus, L2, M2, M, minus, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2], B1, E1/Z2), [as], $adj_prep([A3, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3, E2, Y3], C1, Z2/Z2), np([A, G2, C, D, Z3, A4, B4, acc, C4, J, D4, E4, M, minus, F4, G4, H4, I4, J4, K4, L4, M4, N4, O4, P4, Q4], D1, Z2/F1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adjc(subj:D, rel:J, embv:M, qu:A, whin:B, whout:C), (A1, B1, [than], C1)), D1/E1)--> $adj_tr_comp([F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2, E2], A1, D1/D1), np([A, B, F2, D, G2, H2, I2, acc, J2, minus, K2, L2, M, minus, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2], B1, D1/Y2), [than], np([A, F2, C, D, Z2, A3, B3, acc, C3, J, D3, E3, M, minus, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3], C1, Y2/E1).
adjc([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adjc(subj:D, rel:J, embv:M, qu:A, whin:B, whout:C), (A1, B1, [than], C1, D1)), E1/F1)--> $adj_tr_comp([G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2, E2, F2], A1, E1/E1), np([A, B, G2, D, H2, I2, J2, acc, K2, minus, L2, M2, M, minus, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2], B1, E1/Z2), [than], $adj_prep([A3, B3, C3, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3, V3, W3, X3, E2, Y3], C1, Z2/Z2), np([A, G2, C, D, Z3, A4, B4, acc, C4, J, D4, E4, M, minus, F4, G4, H4, I4, J4, K4, L4, M4, N4, O4, P4, Q4], D1, Z2/F1).

/* --- Relative Clauses --- */
relcl([A, B, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(relcl(whin:B, whout:B), []), Z/Z)-->[].
relcl([A, B, C, D, E, F, G, H, I, plus, J, K, plus, L, M, N, O, P, Q, R, S, T, U, V, W, X], =>(relcl(subj:D, rel:plus, embv:plus, human:O, qu:A, whin:B, whout:C), (Y, Z)), A1/B1)-->relpron([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, O, S1, T1, U1, V1, W1, X1, Y1, Z1, A2], Y, A1/B2), relcl1([A, B, C, D, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O, O2, P2, Q2, R2, S2, T2, U2, V2, A2], Z, B2/B1).
relcl1([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(relcl1(subj:D, human:Q, relpron:Z, qu:A, whin:B, whout:C), A1), B1/C1)-->relcl2([A, B, C, D, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, Q, P1, Q1, R1, S1, T1, U1, V1, W1, Z], A1, B1/C1).
relcl2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(relcl2(subj:D, rel:J, relpron:Z, human:Q, qu:A, whin:B, whout:C), (A1, B1, C1)), D1/E1)-->vp([A, B, F1, D, G1, H1, minus, I1, J1, minus, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], A1, D1/A2), and_relpron([B2, C2, D2, E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, Q, R2, S2, T2, U2, V2, W2, X2, Y2, Z], B1, A2/Z2), relcl2([A, F1, C, D, A3, B3, C3, D3, E3, J, F3, G3, H3, I3, J3, K3, Q, L3, M3, N3, O3, P3, Q3, R3, S3, Z], C1, Z2/E1).
relcl2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(relcl2(subj:D, rel:J, qu:A, whin:B, whout:C), A1), B1/C1)-->vp([A, B, C, D, D1, E1, minus, F1, G1, J, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1], A1, B1/C1).
relcl2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(relcl2(subj:D, rel:J, qu:A, whin:B, whout:C), (A1, B1, C1, D1)), E1/F1)-->np([A, B, G1, D, H1, I1, J1, nom, K1, minus, L1, M1, N1, minus, O1, P1, Q1, R1, S1, T1, U1, V1, W1, minus, X1, Y1], A1, E1/Z1), aux([A2, B2, C2, D2, E2, F2, J1, G2, H2, I2, minus, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2], B1, Z1/Y2), verb([Z2, A3, B3, C3, D3, E3, J1, F3, G3, H3, minus, inf, I3, J3, tr, K3, L3, M3, N3, O3, P3, Q3, R3, S3, T3, U3], C1, Y2/V3), vmod([A, G1, C, K1, W3, X3, Y3, Z3, A4, J, B4, C4, N1, minus, D4, E4, F4, G4, H4, I4, J4, K4, L4, M4, N4, O4], D1, V3/P4), ~(E1/P4/F1).
relcl2([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(relcl2(subj:D, rel:J, qu:A, whin:B, whout:C), (A1, B1, C1)), D1/E1)-->np([A, B, F1, D, G1, H1, I1, nom, J1, minus, K1, L1, M1, minus, N1, O1, P1, Q1, R1, S1, T1, U1, V1, minus, W1, X1], A1, D1/Y1), verb([Z1, A2, B2, C2, D2, E2, I1, F2, G2, H2, minus, fin, I2, J2, tr, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2], B1, Y1/V2), vmod([A, F1, C, J1, W2, X2, Y2, Z2, A3, J, B3, C3, M1, minus, D3, E3, F3, G3, H3, I3, J3, K3, L3, M3, N3, O3], C1, V2/P3), ~(D1/P3/E1).
relpron([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, plus, Q, R, S, T, U, V, W, X, who], =>(relpron(human:plus, relpron:who), [who]), Y/Y)-->[who].
and_relpron([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(and_relpron(human:Q, relpron:Z), ([and], A1)), B1/C1)-->[and], relpron([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, Q, T1, U1, V1, W1, X1, Y1, Z1, A2, Z], A1, B1/C1).

/* --- Verb Phrase Modifiers --- */
/* Verb phrase modifiers are represented by 'vmod' and the auxiliary category 'vmod_x',
		and are always optional: */
vmod([A, B, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vmod(whin:B, whout:B), []), Z/Z)-->[].
vmod([A, B, C, D, E, F, G, H, I, J, K, L, minus, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vmod(subj:D, rel:J, embv:minus, copula:M, qu:A, whin:B, whout:C), (Z, A1)), B1/C1)-->adv_coord([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, M, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, B1/C2), vmod_x([A, B, C, D, D2, E2, F2, G2, H2, J, I2, J2, K2, M, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2], A1, C2/C1).
vmod([A, B, C, D, E, F, G, H, I, J, K, L, minus, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vmod(subj:D, rel:J, embv:minus, copula:M, qu:A, whin:B, whout:C), (Z, A1)), B1/C1)-->pp([A, B, D1, D, E1, F1, G1, H1, I1, J, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], Z, B1/Z1), vmod([A, D1, C, D, A2, B2, C2, D2, E2, J, F2, G2, L1, M, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2], A1, Z1/C1).
vmod_x([A, B, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(vmod_x(whin:B, whout:B), []), Z/Z)-->[].
vmod_x([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(vmod_x(subj:D, rel:J, copula:N, qu:A, whin:B, whout:C), (A1, B1)), C1/D1)-->pp([A, B, E1, D, F1, G1, H1, I1, J1, J, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], A1, C1/A2), vmod([A, E1, C, D, B2, C2, D2, E2, F2, J, G2, H2, M1, N, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2], B1, A2/D1).
pp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(pp(subj:D, rel:J, embv:M, qu:A, whin:B, whout:C), (A1, B1)), C1/D1)--> $prep([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], A1, C1/C1), np([A, B, C, D, E2, F2, G2, acc, H2, J, I2, J2, M, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2], B1, C1/D1).
adv_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, minus, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adv_coord(copula:minus), Z), A1/B1)-->adv_phrase([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], Z, A1/B1).
adv_coord([A, B, C, D, E, F, G, H, I, J, K, L, M, minus, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(adv_coord(copula:minus), (Z, [and], A1)), B1/C1)-->adv_phrase([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], Z, B1/D2), [and], adv_coord([E2, F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3, C3, D3], A1, D2/C1).
adv_phrase([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(adv_phrase, A1), B1/B1)--> $adv([C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2], A1, B1/B1).

/* --- Verbs --- */
verb([A, B, C, D, E, F, minus, G, H, I, minus, fin, J, K, itr, L, M, N, O, P, Q, R, S, T, U, V], =>(verb(be:minus, vcat:itr, pl:minus, vform:fin), W), X/X)--> $iv_finsg([Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], W, X/X).
verb([A, B, C, D, E, F, plus, G, H, I, minus, fin, J, K, itr, L, M, N, O, P, Q, R, S, T, U, V], =>(verb(be:minus, vcat:itr, pl:plus, vform:fin), W), X/X)--> $iv_infpl([Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], W, X/X).
verb([A, B, C, D, E, F, G, H, I, J, minus, inf, K, L, itr, M, N, O, P, Q, R, S, T, U, V, W], =>(verb(be:minus, vcat:itr, vform:inf), X), Y/Y)--> $iv_infpl([Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], X, Y/Y).
verb([A, B, C, D, E, F, minus, G, H, I, minus, fin, J, K, tr, L, M, N, O, P, Q, R, S, T, U, V], =>(verb(be:minus, vcat:tr, pl:minus, vform:fin), W), X/X)--> $tv_finsg([Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], W, X/X).
verb([A, B, C, D, E, F, plus, G, H, I, minus, fin, J, K, tr, L, M, N, O, P, Q, R, S, T, U, V], =>(verb(be:minus, vcat:tr, pl:plus, vform:fin), W), X/X)--> $tv_infpl([Y, Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1], W, X/X).
verb([A, B, C, D, E, F, G, H, I, J, minus, inf, K, L, tr, M, N, O, P, Q, R, S, T, U, V, W], =>(verb(be:minus, vcat:tr, vform:inf), X), Y/Y)--> $tv_infpl([Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1], X, Y/Y).
verb([A, B, C, D, E, F, G, H, I, J, plus, K, L, M, tr, N, O, P, Q, R, S, T, U, V, W, X], =>(verb(be:plus, vcat:tr), Y), Z/Z)--> $tv_pp([A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1], Y, Z/Z).
aux([A, B, C, D, plus, E, minus, F, G, H, plus, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W], =>(aux(be:plus, exist:plus, pl:minus), [is]), X/X)-->[is].
aux([A, B, C, D, minus, E, minus, F, G, H, plus, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W], =>(aux(be:plus, exist:minus, pl:minus), (//, [is, not])), X/Y)-->[Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1]// (X/Y), [is, not].
aux([A, B, C, D, plus, E, plus, F, G, H, plus, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W], =>(aux(be:plus, exist:plus, pl:plus), [are]), X/X)-->[are].
aux([A, B, C, D, minus, E, plus, F, G, H, plus, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W], =>(aux(be:plus, exist:minus, pl:plus), (//, [are, not])), X/Y)-->[Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1]// (X/Y), [are, not].
aux([A, B, C, D, minus, E, minus, F, G, H, minus, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W], =>(aux(be:minus, exist:minus, pl:minus), (//, ['does not'])), X/Y)-->[Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1]// (X/Y), ['does not'].
aux([A, B, C, D, minus, E, plus, F, G, H, minus, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W], =>(aux(be:minus, exist:minus, pl:plus), (//, ['do not'])), X/Y)-->[Z, A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1]// (X/Y), ['do not'].

/* --- Quantifiers --- */
quant([A, B, C, D, plus, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(quant(exist:plus), [a]), Z/Z)-->[a].
quant([A, B, C, D, minus, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y], =>(quant(exist:minus), (//, [every])), Z/A1)-->[B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2]// (Z/A1), [every].
num_quant([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(num_quant, [exactly]), A1/A1)-->[exactly].

/* --- Indefinite Pronouns --- */
ipron([A, B, C, D, plus, E, F, G, H, I, J, K, L, M, N, O, plus, P, Q, R, S, T, U, V, W, X], =>(ipron(exist:plus, human:plus), [somebody]), Y/Y)-->[somebody].
ipron([A, B, C, D, minus, E, F, G, H, I, J, K, L, M, N, O, plus, P, Q, R, S, T, U, V, W, X], =>(ipron(exist:minus, human:plus), (//, [everybody])), Y/Z)-->[A1, B1, C1, D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1]// (Y/Z), [everybody].

/* --- Anaphoric Pronouns --- */
$pron([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, plus, fem, Q, R, S, T, U, plus, V, W], =>($pron(refl:plus, human:plus, gender:fem), [herself]), X/X)-->[herself].
$pron([A, B, C, D, E, F, G, nom, H, I, J, K, L, M, N, O, plus, fem, P, Q, R, S, T, minus, U, V], =>($pron(refl:minus, case:nom, human:plus, gender:fem), [she]), W/W)-->[she].
$pron([A, B, C, D, E, F, G, acc, H, I, J, K, L, M, N, O, plus, fem, P, Q, R, S, T, minus, U, V], =>($pron(refl:minus, case:acc, human:plus, gender:fem), [her]), W/W)-->[her].

/* --- Lexicon --- */
$prop_sg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, plus, fem, Q, R, S, T, 'Mary', U, V, W], =>($prop_sg(human:plus, gender:fem, text:'Mary'), ['Mary']), X/X)-->['Mary'].
$def_noun_sg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, woman, V, W, X, Y], =>($def_noun_sg(noun:woman), ['the woman']), Z/Z)-->['the woman'].
$ref([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, 'X', W, X, Y], =>($ref(text:'X'), ['X']), Z/Z)-->['X'].
$num([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($num, ['2']), A1/A1)-->['2'].
$noun_pl([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($noun_pl, [women]), A1/A1)-->[women].
$noun_sg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, plus, fem, Q, R, S, T, woman, U, V, W], =>($noun_sg(text:woman, human:plus, gender:fem), [woman]), X/X)-->[woman].
$var([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, 'X', W, X, Y], =>($var(text:'X'), ['X']), Z/Z)-->['X'].
$iv_finsg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($iv_finsg, [waits]), A1/A1)-->[waits].
$iv_infpl([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($iv_infpl, [wait]), A1/A1)-->[wait].
$tv_finsg([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($tv_finsg, [asks]), A1/A1)-->[asks].
$tv_infpl([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($tv_infpl, [ask]), A1/A1)-->[ask].
$tv_pp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($tv_pp, [asked]), A1/A1)-->[asked].
$adj_itr([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($adj_itr, [young]), A1/A1)-->[young].
$adj_itr_comp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($adj_itr_comp, [younger]), A1/A1)-->[younger].
$adj_tr([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, about, Y], =>($adj_tr(prep:about), ['mad-about']), Z/Z)-->['mad-about'].
$adj_tr_comp([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, about, Y], =>($adj_tr_comp(prep:about), ['madder-about']), Z/Z)-->['madder-about'].
$adj_prep([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, about, Y], =>($adj_prep(prep:about), [about]), Z/Z)-->[about].
$prep([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($prep, [for]), A1/A1)-->[for].
$adv([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>($adv, [early]), A1/A1)-->[early].

/* --- Auxiliary Rules for Testing --- */
test([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(test, (A1, B1)), C1/D1)-->complete_sentence([E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2, D2], A1, C1/E2), fill([F2, G2, H2, I2, J2, K2, L2, M2, N2, O2, P2, Q2, R2, S2, T2, U2, V2, W2, X2, Y2, Z2, A3, B3, C3, D3, E3], B1, E2/D1).
fill([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(fill, []), A1/A1)-->[].
fill([A, B, C, D, E, F, G, H, I, J, K, L, M, N, O, P, Q, R, S, T, U, V, W, X, Y, Z], =>(fill, ([''], A1)), B1/C1)-->[''], fill([D1, E1, F1, G1, H1, I1, J1, K1, L1, M1, N1, O1, P1, Q1, R1, S1, T1, U1, V1, W1, X1, Y1, Z1, A2, B2, C2], A1, B1/C1).


~(I/T/O) --> {append([X,[//|N],I],T), \+ member(//,N), findall(>>(R),member(>>(R),X),Y), append([Y,N,I],O)}, !.
~(_/O/O) --> [].
//(_, T/[//|T]) --> [].
>(F, T/[>(F)|T]) --> [].
>>(F, T/[>>(F)|T]) --> [].
<(L, [R|T]/[R|T]) --> {R =.. [_,Q], \+ member(-Q, L), \+ \+ member(+Q, L), !, member(+Q, L)}.
<(L, [R|T]/[R|T]) --> <(L,T/T).
/<(F, T/T) --> {\+ (member(R,T), R =.. [_,F])}, !.
#(#(P),L,L) :- length(L,P).
